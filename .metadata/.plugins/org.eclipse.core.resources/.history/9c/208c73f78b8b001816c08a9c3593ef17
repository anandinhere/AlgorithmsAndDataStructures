package test;

import java.io.Console;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.Properties;
import java.util.Scanner;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import javax.mail.PasswordAuthentication;

/**
 * Simple demonstration of using the javax.mail API.
 * 
 * Run from the command line. Please edit the implementation to use correct
 * email addresses and host name.
 * 
 * 
 * http://www.coderanch.com/t/555690/java/java/easiest-send-email-java-program
 */
public final class Emailer {

	static String configFilePath = "";

	public static void main(String[] args) {
		Emailer emailer = new Emailer();
		// the domains of these email addresses should be valid,
		// or the example will fail:
		// configFilePath = args[0];
		// fetchConfig();

		String userEmail;
		String password;
		Console console = System.console();

		if (console == null) {
			Scanner in = new Scanner(System.in);

			System.out.println("Username: ");
			userEmail = in.nextLine();

			System.out.println("Password: ");
			password = in.nextLine();
		} else {
			userEmail = console.readLine("Username: ");
			password = console.readPassword("Password: ").toString();
		}
		// emailer.sendEmailTLS(userEmail, password, "Test Subject", "Test Body");
		emailer.sendEmailSSL(userEmail, password, "Test Subject", "Test Body");
		password = null;
	}

	/**
	 * Send a single email.
	 */
	// Make sure to enable accesst to less secure apps in gmail account
	public void sendEmailTLS(String userEmail, String password, String aSubject, String aBody) {
		// Here, no Authenticator argument is used (it is null).
		// Authenticators are used to prompt the user for user
		// name and password.
		// Session session = Session.getDefaultInstance(fMailServerConfig, null);

		Properties props = new Properties();
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.starttls.enable", "true");
		props.put("mail.smtp.host", "smtp.gmail.com");
		props.put("mail.smtp.port", "587");

		// Using Scanner for Getting Input from User

		Session session = Session.getInstance(props, new javax.mail.Authenticator() {
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(userEmail, password.toString());
			}
		});

		MimeMessage message = new MimeMessage(session);
		try {
			// the "from" address may be set in code, or set in the
			// config file under "mail.from" ; here, the latter style is used
			message.setFrom(new InternetAddress(userEmail));
			message.addRecipient(Message.RecipientType.TO, new InternetAddress("ssiloju@asu.edu"));

			message.setSubject(aSubject);
			message.setText(aBody);

			Transport.send(message);
			System.out.println("Email Sent");

			// Transport.send( message );
		} catch (MessagingException ex) {
			System.err.println("Cannot send email. " + ex);
		}
	}

	public void sendEmailSSL(String userEmail, String password, String aSubject, String aBody) {
		Properties props = new Properties();
		props.put("mail.smtp.host", "smtp.gmail.com");
		props.put("mail.smtp.socketFactory.port", "465");
		props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.port", "465");

		Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(userEmail, password);
			}
		});

		try {

			Message message = new MimeMessage(session);
			message.setFrom(new InternetAddress("from@no-spam.com"));
			message.setRecipients(Message.RecipientType.TO, InternetAddress.parse("to@no-spam.com"));
			message.setSubject("Testing Subject");
			message.setText("Dear Mail Crawler," + "\n\n No spam to my email, please!");

			Transport.send(message);

			System.out.println("Done");

		} catch (MessagingException e) {
			throw new RuntimeException(e);
		}
	}

}