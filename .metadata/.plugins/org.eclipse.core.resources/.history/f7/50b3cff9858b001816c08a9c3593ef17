package test;

import java.io.Console;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.Properties;
import java.util.Scanner;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import javax.mail.PasswordAuthentication;

/**
 * Simple demonstration of using the javax.mail API.
 * 
 * Run from the command line. Please edit the implementation to use correct
 * email addresses and host name.
 * 
 * 
 * http://www.coderanch.com/t/555690/java/java/easiest-send-email-java-program
 */
public final class Emailer {

	static String configFilePath = "";

	public static void main(String[] args) {
		Emailer emailer = new Emailer();
		// the domains of these email addresses should be valid,
		// or the example will fail:
		// configFilePath = args[0];
		// fetchConfig();
		 
        
        Console console = System.console();
        String userEmail = console.readLine("Username: ");
        char[] password = console.readPassword("Password: ");
		emailer.sendEmail(userEmail, password.toString(),"Test Subject", "Test Body");
	}

	/**
	 * Send a single email.
	 */
	// Make sure to enable accesst to less secure apps in gmail account
	public void sendEmail(String userEmail, String password, String aSubject, String aBody) {
		// Here, no Authenticator argument is used (it is null).
		// Authenticators are used to prompt the user for user
		// name and password.
		// Session session = Session.getDefaultInstance(fMailServerConfig, null);

		Properties props = new Properties();
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.starttls.enable", "true");
		props.put("mail.smtp.host", "smtp.gmail.com");
		props.put("mail.smtp.port", "587");
		
		// Using Scanner for Getting Input from User

        
 

		Session session = Session.getInstance(props, new javax.mail.Authenticator() {
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(userEmail, password.toString());
			}
		});
		
		Arrays.fill(password, ' ');

		MimeMessage message = new MimeMessage(session);
		try {
			// the "from" address may be set in code, or set in the
			// config file under "mail.from" ; here, the latter style is used
			message.setFrom(new InternetAddress(userEmail));
			message.addRecipient(Message.RecipientType.TO, new InternetAddress(userEmail));

			message.setSubject(aSubject);
			message.setText(aBody);

			Transport.send(message);

			// Transport.send( message );
		} catch (MessagingException ex) {
			System.err.println("Cannot send email. " + ex);
		}
	}

	/**
	 * Allows the config to be refreshed at runtime, instead of requiring a restart.
	 */
	public static void refreshConfig() {
		fMailServerConfig.clear();
		fetchConfig();
	}

	// PRIVATE //

	private static Properties fMailServerConfig = new Properties();

	/**
	 * Open a specific text file containing mail server parameters, and populate a
	 * corresponding Properties object.
	 */
	private static void fetchConfig() {
		InputStream input = null;
		try {
			// If possible, one should try to avoid hard-coding a path in this
			// manner; in a web application, one should place such a file in
			// WEB-INF, and access it using ServletContext.getResourceAsStream.
			// Another alternative is Class.getResourceAsStream.
			// This file contains the javax.mail config properties mentioned
			// above.
			// /"D:/DM Project/workspace/maventest/src/test/email.txt"
			input = new FileInputStream(configFilePath);
			fMailServerConfig.load(input);
		} catch (IOException ex) {
			System.err.println("Cannot open and load mail server properties file.");
		} finally {
			try {
				if (input != null)
					input.close();
			} catch (IOException ex) {
				System.err.println("Cannot close mail server properties file.");
			}
		}
	}
}